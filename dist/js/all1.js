let restaurants,neighborhoods,cuisines;var newMap,markers=[];document.addEventListener("DOMContentLoaded",e=>{initMap(),fetchNeighborhoods(),fetchCuisines(),DBHelper.IdbToServer()}),navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").then(function(){console.log("SW Resgistered!")}).catch(function(){console.log("SW Fail")}),lazyLoad=(()=>{let e=new IntersectionObserver(function(e,t){e.forEach(e=>{if(e.isIntersecting){let n=e.target;n.src=n.dataset.src,n.classList.remove("lazyimg"),t.unobserve(n)}})},{root:null,rootMargin:"0px",threshold:0});document.querySelectorAll("#lazyimg").forEach(t=>{e.observe(t)})}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})}),initMap=(()=>{self.newMap=L.map("map",{center:[40.722216,-73.987501],zoom:12,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1Ijoidmk1dGFyIiwiYSI6ImNqaWt0OTc3MDFlbGczcHBmb3I2MHZ1M3QifQ.l87jrioq9ldfQiBMHpKX6w",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),updateRestaurants()}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,r=t.selectedIndex,s=e[n].value,a=t[r].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(s,a,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers&&self.markers.forEach(e=>e.remove()),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap(),lazyLoad()}),createRestaurantHTML=(e=>{const t=document.createElement("li"),n=document.createElement("img"),r=document.createAttribute("data-src");n.className="restaurant-img",n.id="lazyimg",n.src=DBHelper.imageUrlForRestaurant(e)+"-blurry.jpg",r.value=DBHelper.imageUrlForRestaurant(e)+".jpg",n.setAttributeNode(r),n.alt=e.name+" located at "+e.address,n.setAttribute("tabindex",0),t.append(n);const s=document.createElement("h2");s.innerHTML=e.name,t.append(s);const a=document.createElement("button");a.addEventListener("click",function(){const t=DBHelper.toggleFavorite(e.is_favorite,e.id);a.innerHTML=`Favorite: ${t}`,e.is_favorite=t}),a.innerHTML=`Favorite: ${e.is_favorite}`,t.append(a),t.append(document.createElement("br")),t.append(document.createElement("br"));const o=document.createElement("p");o.innerHTML=e.neighborhood,t.append(o);const l=document.createElement("p");l.innerHTML=e.address,t.append(l);const i=document.createElement("a");return i.innerHTML="View Details",i.href=DBHelper.urlForRestaurant(e),t.append(i),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.newMap);t.on("click",function(){window.location.href=t.options.url}),self.markers.push(t)})});class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(e){let t=new XMLHttpRequest;t.open("GET",DBHelper.DATABASE_URL),t.onload=(()=>{if(200===t.status){const n=JSON.parse(t.responseText);e(null,n)}else{const n=`Request failed. Returned status of ${t.status}`;e(n,null)}}),t.send()}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchreviewById(e,t){fetch("http://localhost:1337/reviews/?restaurant_id="+e).then(function(e){return e.json()}).then(function(e){return t(null,e)})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((r,s)=>{if(r)n(r,null);else{let r=s;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}`}static mapMarkerForRestaurant(e,t){const n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return n.addTo(newMap),n}static toggleFavorite(e,t){const n="http://localhost:1337/restaurants/"+t+"/?is_favorite=";return 1==e|"true"==e|null==e?(e=!1,fetch(n+e,{method:"PUT"}).then(e=>{fetch("http://localhost:1337/restaurants")}).catch(r=>{idbKeyval.set("restaurant_id="+t,{method:"PUT",url:n+e}).then(()=>{caches.open("restaurantReviewCache").then(e=>e.match("http://localhost:1337/restaurants")).then(e=>e.json()).then(n=>{for(let r of n)r.id==t&&(r.is_favorite=e);let r=new Response(JSON.stringify(n));caches.open("restaurantReviewCache").then(e=>{e.put("http://localhost:1337/restaurants",r)})})})})):0==e|"false"==e&&(e=!0,fetch(n+e,{method:"PUT"}).then(e=>{fetch("http://localhost:1337/restaurants")}).catch(r=>{idbKeyval.set("restaurant_id="+t,{method:"PUT",url:n+e}).then(()=>{caches.open("restaurantReviewCache").then(e=>e.match("http://localhost:1337/restaurants")).then(e=>e.json()).then(n=>{for(let r of n)r.id==t&&(r.is_favorite=e);let r=new Response(JSON.stringify(n));caches.open("restaurantReviewCache").then(e=>{e.put("http://localhost:1337/restaurants",r)})})})})),e}static submitReview(){document.getElementById("my-form").addEventListener("submit",function(e){e.preventDefault();const t=document.getElementById("resIdForForm").value,n=document.getElementById("form-name").value,r=document.getElementById("form-rating").value,s=document.getElementById("form-comments").value,a="http://localhost:1337/reviews/?restaurant_id="+t,o={restaurant_id:t,name:n,rating:r,comments:s};fetch("http://localhost:1337/reviews/",{method:"POST",body:JSON.stringify(o)}).then(e=>{fetch(a).then(e=>{window.location.reload()})}).catch(e=>{idbKeyval.set(Date.now(),{method:"POST",body:JSON.stringify(o)}).then(()=>{caches.open("restaurantReviewCache").then(e=>e.match(a)).then(e=>e.json()).then(e=>{e.push(o);let t=new Response(JSON.stringify(e));caches.open("restaurantReviewCache").then(e=>{e.put(a,t)})})}).catch(e=>console.log("It failed!",e)).then(()=>window.location.reload())})})}static IdbToServer(e){idbKeyval.keys().then(e=>e[0]).then(t=>{idbKeyval.get(t).then(e=>{"POST"==e.method?fetch("http://localhost:1337/reviews/",e).then(()=>idbKeyval.del(t)).then(()=>DBHelper.IdbToServer()):(console.log(e),fetch(e.url,{method:e.method}).then(()=>idbKeyval.del(t)).then(()=>DBHelper.IdbToServer()))}).catch(t=>{console.log("no pairs"),e&&fetch("http://localhost:1337/reviews/?restaurant_id="+e).then(()=>console.log("updated cache")).then(()=>fetch("http://localhost:1337/restaurants")),fetch("http://localhost:1337/restaurants")})})}static async testCacheRetrieve(e){const t={restaurant_id:"2",name:"McToad",rating:"2",comments:"this place sucks"},n="http://localhost:1337/reviews/?restaurant_id="+e;caches.open("restaurantReviewCache").then(e=>e.match(n)).then(e=>e.json()).then(e=>{e.push(t);let r=new Response(JSON.stringify(e));caches.open("restaurantReviewCache").then(e=>{e.put(n,r)})})}}var idbKeyval=function(e){"use strict";class t{constructor(e="keyval-store",t="keyval"){this.storeName=t,this._dbp=new Promise((n,r)=>{const s=indexedDB.open(e,1);s.onerror=(()=>r(s.error)),s.onsuccess=(()=>n(s.result)),s.onupgradeneeded=(()=>{s.result.createObjectStore(t)})})}_withIDBStore(e,t){return this._dbp.then(n=>new Promise((r,s)=>{const a=n.transaction(this.storeName,e);a.oncomplete=(()=>r()),a.onabort=a.onerror=(()=>s(a.error)),t(a.objectStore(this.storeName))}))}}let n;function r(){return n||(n=new t),n}return e.Store=t,e.get=function(e,t=r()){let n;return t._withIDBStore("readonly",t=>{n=t.get(e)}).then(()=>n.result)},e.set=function(e,t,n=r()){return n._withIDBStore("readwrite",n=>{n.put(t,e)})},e.del=function(e,t=r()){return t._withIDBStore("readwrite",t=>{t.delete(e)})},e.clear=function(e=r()){return e._withIDBStore("readwrite",e=>{e.clear()})},e.keys=function(e=r()){const t=[];return e._withIDBStore("readonly",e=>{(e.openKeyCursor||e.openCursor).call(e).onsuccess=function(){this.result&&(t.push(this.result.key),this.result.continue())}}).then(()=>t)},e}({});